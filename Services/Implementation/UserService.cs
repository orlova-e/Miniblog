using Domain.Entities;
using Domain.Entities.Enums;
using Repo.Interfaces;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace Services.Implementation
{
    public class UserService : IUserService
    {
        public IRepository repository { get; private set; }
        public UserService(IRepository repository)
        {
            this.repository = repository;
        }

        public IEnumerable<string> CheckForInvalidAccountParameters(Account account)
        {
            var sameUsername = repository.Users.Find(u => u.Username == account.Username);
            var sameEmail = repository.Users.Find(u => u.Email == account.Email);
            IEnumerable<string> errors = new List<string>();
            if(sameUsername.Any())
            {
                errors.Append("Username");
            }
            if(sameEmail.Any())
            {
                errors.Append("Email");
            }
            return errors;
        }

        public async Task<User> CreateIntoDbAsync(Account account)
        {
            // проверка (есть ли др. пользователи) происходит до выполнения этого метода
            User newUser = ToUser(account);

            await repository.Users.CreateAsync(newUser);
            User user = repository.Users.Find(u => u.Email == newUser.Email && u.Hash == newUser.Hash).First(); // user with Id generated by db
            return user;
        }

        public string GetHash(string password)
        {
            byte[] pass = Encoding.UTF8.GetBytes(password);
            string hash;
            using (SHA256 sha = SHA256.Create())
            {
                byte[] fromPass = sha.ComputeHash(pass);
                hash = Encoding.UTF8.GetString(fromPass);
            }
            return hash;
        }

        private User ToUser(Account account)
        {
            Role userRole = repository.Roles.Find(r=> r.Type == RoleType.User).First();

            User newUser = new User()
            {
                Username = account.Username,
                Email = account.Email,
                RoleId = userRole.Id,
                Role = userRole,
                Hash = GetHash(account.Password),
                DateOfRegistration = DateTimeOffset.UtcNow
            };

            return newUser;
        }

        public User GetFromDb(Account account)
        {
            string hash = GetHash(account.Password);
            User user = repository.Users.Find(u => u.Username == account.Username && u.Hash == hash).FirstOrDefault();
            Role role;
            if(user != null)
            {
                role = repository.Roles.GetByIdAsync(user.RoleId).Result;
                user.Role = role;
            }
            return user;
        }

        //public bool CheckForExistence(Account account, Guid guid)
        //{
        //    string hash = GetHash(account.Password);
        //    var user = repository.Users.Find(u => u.Username == account.Username
        //        && u.Hash == hash
        //        && u.Id == guid)
        //        .FirstOrDefault();
        //    if(user != null)
        //    {
        //        return true;
        //    }
        //    return false;
        //}

        //public bool CheckForExistence(LoginViewModel loginModel, Guid guid)
        //{
        //    string hash = GetHash(loginModel.Password);
        //    var user = repository.Users.Find(u => u.Username == loginModel.Username
        //        && u.Hash == hash
        //        && u.Id == guid)
        //        .FirstOrDefault();
        //    if (user != null)
        //    {
        //        return true;
        //    }
        //    return false;
        //}

        public async Task<User> GetFromDbAsync(Guid id)
        {
            return await repository.Users.GetByIdAsync(id);
        }

        public async Task AddSubscriberAsync(Guid authorId, Guid subscriberId)
        {
            User author = await repository.Users.GetByIdAsync(authorId);
            User subscriber = await repository.Users.GetByIdAsync(subscriberId);
            if(!author.Subscribers.Contains(subscriber))
                author.Subscribers.Add(subscriber);
            await repository.Users.UpdateAsync(author);
        }

        public async Task RemoveSubscriberAsync(Guid authorId, Guid subscriberId)
        {
            User author = await repository.Users.GetByIdAsync(authorId);
            User subscriber = await repository.Users.GetByIdAsync(subscriberId);
            if (author.Subscribers.Contains(subscriber))
                author.Subscribers.Remove(subscriber);
            await repository.Users.UpdateAsync(author);
        }

        public async Task<List<User>> GetSubscriptionAsync(Guid userId)
        {
            User user = await repository.Users.GetByIdAsync(userId);
            List<User> subscription = repository.Users.Find(u => u.Subscribers.Contains(user)).ToList();
            return subscription;
        }

        public User GetUserFromDb(Func<User, bool> predicate)
        {
            return repository.Users.Find(predicate).FirstOrDefault();
        }

        public User FindByName(string username)
        {
            User user = repository.Users.Find(u => u.Username.Equals(username)).FirstOrDefault();
            return user;
        }
    }
}
