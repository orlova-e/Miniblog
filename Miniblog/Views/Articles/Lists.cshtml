@using Domain.Entities.Enums
@using Repo.Interfaces;
@using System.Security.Claims;

@model ListViewModel
@inject IOptionRepository<Role> rolesRepo

@{
    Role role = null;
    if (User.Identity.IsAuthenticated)
    {
        string roleType = User.FindFirstValue(ClaimsIdentity.DefaultRoleClaimType);
        RoleType rt = (RoleType)Enum.Parse(typeof(RoleType), roleType);
        role = rolesRepo.Find(r => r.Type == rt).FirstOrDefault();
    }
}

@if (Model.Articles.Any())
{
    await Html.RenderPartialAsync("~/Views/Articles/_ListParametersPartial.cshtml", Model);
}

<div id="articlesContainer" class="blog-container">

    @{
        if (!Model.Articles.Any())
        {
            ServerMessage serverMessage = new ServerMessage()
            {
                ShowSmile = true,
                MessageText = "No articles yet"
            };
            await Html.RenderPartialAsync("_ServerMessagePartial", serverMessage);
        }
        else
        {
            foreach (var article in Model.Articles)
            {
                await Html.RenderPartialAsync("~/Views/Articles/_PreviewArticlePartial.cshtml", article);
            }
        }
    }

</div>

@if (Model.Articles.Any())
{
    string previous = Url.Action(Model.PageName.ToLower(), "articles", new
    {
        page = Model.Current - 1,
        sortby = Enum.GetName(typeof(ListSorting), Model.ListSorting).ToLower()
    });
    string next = Url.Action(Model.PageName.ToLower(), "articles", new
    {
        page = Model.Current + 1,
        sortby = Enum.GetName(typeof(ListSorting), Model.ListSorting).ToLower()
    });

    string containerClass = "blog";
    if (!Model.HasNext || !Model.HasPrevious)
    {
        containerClass = "one-button-container";
    }

    if (Model.Current > 1 && Model.Current < Model.Total)
    {
        <div class="load-more-container @containerClass">
            @if (Model.HasPrevious)
            {
                <a href="@previous" class="button-left usual-button usual-button-reverse" id="previousPageButton">Previous</a>
            }
            @if (Model.HasNext)
            {
                <a href="@next" class="button-right usual-button" id="nextPageButton">Next</a>
            }
        </div>
    }

    @section Scripts {
        @await Html.PartialAsync("_ListScripts")
    }
}
else if (Model.PageName.Equals("List") && User.Identity.IsAuthenticated && (role?.WriteArticles ?? default))
{
    <div class="load-more-container one-button-container">
        <a asp-action="Add" asp-controller="Articles" class="usual-button usual-button-reverse">Add new</a>
    </div>
}