@using Domain.Entities.Enums
@using Services.Interfaces

@inject IUserService userService

@model ListViewModel<Article>

@{
    ViewBag.Page = Model.PageName.ToLower() switch
    {
        "default" => string.Empty,
        "account" => Model.ItemName,
        "series" => Model.ItemName,
        "topic" => Model.PageName + ": " + Model.ItemName,
        _ => Model.PageName
    };

    Role role = null;
    if (User.Identity.IsAuthenticated)
    {
        role = userService.FindByName(User.Identity.Name).Role;
    }
}

@functions {
    string GetPrevious() => GetLink(Model.Current - 1);
    string GetNext() => GetLink(Model.Current + 1);

    string GetLink(uint page)
    {
        string pageName = Model.PageName.ToLower();
        string sortBy = Enum.GetName(typeof(ListSorting), Model.ListSorting).ToLower();
        return pageName switch
        {
            "account" => Url.Action("account", "users", new { username = Model.ItemName, page = page, sortby = sortBy }),
            "series" => Url.Action("serieswith", "home", new { name = Model.ItemName, page = page, sortBy = sortBy }),
            "topic" => Url.Action(pageName, "home", new { name = Model.ItemName, page = page, sortBy = sortBy }),
            _ => Url.Action("lists", "articles", new { listName = pageName, page = page, sortby = sortBy })
        };
    }
}

@if (!Model.Entities.Any())
{
    ServerMessage serverMessage = new()
    {
        ShowSmile = true,
        MessageText = "There is no articles yet"
    };
    await Html.RenderPartialAsync("_MessagePartial", serverMessage);
    if (Model.PageName is "default" && (role?.WriteArticles ?? false))
    {
        <div class="uk-align-center uk-text-center">
            <a class="uk-button uk-button-secondary" href="@Url.Action("add", "articles")">Add new</a>
        </div>
    }
}
else
{
    await Html.RenderPartialAsync("~/Views/Articles/_ListParametersPartial.cshtml", Model);

    <div class="uk-container uk-margin">
        <div id="articlesContainer" uk-grid="masonry: true" class="uk-grid-medium uk-child-width-1-1@m">
            @foreach (Article article in Model.Entities)
            {
                await Html.RenderPartialAsync("~/Views/Articles/_PreviewArticlePartial.cshtml", article);
            }
        </div>
    </div>

    @if (Model.HasPrevious || Model.HasNext)
    {
        <div class="uk-flex-center uk-margin" uk-grid>
            <div>
                <ul class="uk-pagination">
                    @if (Model.HasPrevious)
                    {
                        <li><a href="@GetPrevious()"><span class="uk-margin-small-right" uk-pagination-previous></span> Previous</a></li>
                    }
                    @if (Model.HasNext)
                    {
                        <li class="uk-margin-auto-left"><a href="@GetNext()">Next <span class="uk-margin-small-left" uk-pagination-next></span></a></li>
                    }
                </ul>
            </div>
        </div>
    }

    @section Scripts {
        <script src="~/js/list/articlesLayout.js"></script>
    }
}
