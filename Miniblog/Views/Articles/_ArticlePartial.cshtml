@using Miniblog.Models.Entities
@using Miniblog.Models.Services.Interfaces
@using Miniblog.ViewModels

@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer Localizer
@inject IOptionRepository<ListDisplayOptions> listDisplayRepo

@model ArticleReadViewModel

@{
    ListDisplayOptions listOptions = await listDisplayRepo.FirstOrDefaultAsync();
    ArticleOptions articleOptions = Model.Article.DisplayOptions;
    if (listOptions.OverrideForUserArticle)
    {
        listOptions = (ListDisplayOptions)articleOptions;
    }
}

<article class="art text-alegreya-style" id="@Model.Article.Id.ToString()">
    <div class="blog-content">
        <div class="article-meta text-sans-style">
            <a href="#" class="article-header">
                <h2><b>@Model.Article.Header</b></h2>
            </a>
            <ul class="article-info clearfix">
                <li class="article-info-user">
                    @if (listOptions.Username)
                    {
                        <a href="@Url.Action("Account", "Users", new { username = Model.Article.User.Username })">
                            <div class="user-info-container">
                                @if (Model.Article.User.Avatar != null)
                                {
                                    <img src="data:image/jpeg;base64,@(Convert.ToBase64String(Model.Article.User.Avatar))" width="10px" height="10px" alt="@Model.Article.User.Username">
                                }
                                else
                                {
                                    <img src="@Url.Content("~/img/social_line/anonymous_user.png")" width="10px" height="10px" alt="User">
                                }
                                <span>@Model.Article.User.Username</span>
                            </div>
                        </a>
                    }
                    @if (listOptions.DateAndTime)
                    {
                        //var th = System.Globalization.CultureInfo.CurrentCulture
                        <a class="article-time-info" href="@Url.Action("List", "Articles", new { date = Model.Article.DateTime.ToString("yyyy/MM/dd") })">
                            @*@Model.Article.DateTime.ToString("d", CultureInfo.CurrentCulture)*@
                        </a>
                        <div class="time-info-utc time-info-created">@Model.Article.DateTime.ToString("O")</div>
                    }
                </li>
                <li>
                    @if (listOptions.Likes)
                    {
                        <img src="/img/buttons/heart.png" alt="likes" height="20px" width="20px">
                        <span id="articleLikesInfo">@Model.Article.Likes.Count</span>
                    }
                    @if (listOptions.Bookmarks)
                    {
                        <img src="/img/ico/bookmark5.png" alt="bookmarks" height="20px" width="20px">
                        <span id="articleBookmarksInfo">@Model.Article.Bookmarks.Count</span>
                    }
                    @if (listOptions.Comments)
                    {
                        <img src="/img/buttons/chat-2.png" alt="comments" height="18px" width="18px">
                        <span id="articleCommentsInfo">@Model.Article.Comments.Count</span>
                    }
                    @if (listOptions.Topic)
                    {
                        <span>Topic: </span><a href="#">@(Model.Article.Topic?.Name ?? "no topic")</a>
                    }
                    @if (listOptions.Series)
                    {
                        <span>Series: </span><a href="#">@(Model.Article.Series?.Name ?? "no series")</a>
                    }
                </li>
                @if (listOptions.Tags)
                {
                    <li>
                        Tags:
                        @{
                            string[] tags = Model.Article.Tags.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                            for (int i = 0; i < tags.Length; i++)
                            {
                                <a href="#">@tags[i]</a>
                            }
                            if(tags.Length == 0)
                            {
                                <span>no tags</span>
                            }
                        }
                    </li>
                }
            </ul>
        </div>
        <div class="blog-text">
            @{
                string[] paragraphs = Model.Article.Text.Split(new string[] { "\n", "\r\n" }, StringSplitOptions.None);
                int imagesNumber = Model.Article.Images.Count;
                for (int i = 0; i < paragraphs.Length + imagesNumber; i++)
                {
                    Image currentImage = (from image in Model.Article.Images
                                          where image.Position == i
                                          select image).FirstOrDefault();
                    if (currentImage != null)
                    {
                        <div class="article-image">
                            <img src="data:image/jpeg;base64,@(Convert.ToBase64String(currentImage.File))" alt="@currentImage.Name">
                        </div>
                    }
                    else
                    {
                        <p>@paragraphs[i]</p>
                    }
                }
            }
        </div>

        <div class="article-user-actions text-roboto-style">
            <div class="like-action">
                <button type="button" onclick="likeArticle()">
                    @{
                        //var like = from l in Model.Article.Likes
                        //           where l.UserId == Model.CurrentUser.Id
                        //           select l;
                        UserFavourite like = Model.Article.Likes
                            .Where(l => l.UserId == Model.CurrentUser?.Id)
                            .FirstOrDefault();
                        if (like is object)
                        {
                            <img class="article-action-checked" src="~/img/buttons/heart red.png" alt="like">
                            <img class="article-action-inactive article-action-unchecked" src="~/img/buttons/heart.png" alt="like">
                        }
                        else
                        {
                            <img class="article-action-inactive article-action-checked" src="~/img/buttons/heart red.png" alt="like">
                            <img class="article-action-unchecked" src="~/img/buttons/heart.png" alt="like">
                        }
                    }
                </button>
                <span id="articleLikesNumber">@Model.Article.Likes.Count</span> @*ID changed*@
            </div>

            <div class="bookmark-action">
                <button type="button" onclick="bookmarkArticle()">
                    @{
                        UserBookmark bookmark = Model.Article.Bookmarks
                            .Where(b => b.UserId == Model.CurrentUser.Id)
                            .FirstOrDefault();
                        if (bookmark is object)
                        {
                            <img class="article-action-checked" src="~/img/ico/bookmark-checked.png" alt="bookmark by Calvin Goodman from the Noun Project">
                            <img class="article-action-inactive article-action-unchecked" src="~/img/ico/bookmark-unchecked.png" alt="bookmark by Calvin Goodman from the Noun Project">
                        }
                        else
                        {
                            <img class="article-action-inactive article-action-checked" src="~/img/ico/bookmark-checked.png" alt="bookmark by Calvin Goodman from the Noun Project">
                            <img class="article-action-unchecked" src="~/img/ico/bookmark-unchecked.png" alt="bookmark by Calvin Goodman from the Noun Project">
                        }
                    }
                </button>
                <span id="articleBookmarksNumber">@Model.Article.Bookmarks.Count</span> @*ID changed*@
            </div>

            @if (Model.Article.DisplayOptions.Comments)
            {
                <div class="comment-action">
                    <a href="#commentsAnch">
                        <img src="~/img/ico/chat.png" alt="from the Noun Project">
                    </a>
                    <span id="articleCommentsNumber">@Model.Article.Comments.Count</span>
                </div>
            }

        </div>
    </div>
</article>