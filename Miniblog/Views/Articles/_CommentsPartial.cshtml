@model CommentsViewModel

@{
    CommentViewModel commentViewModel = new();

    async Task GetCommentAsync(List<Comment> children, int currentDepth)
    {
        ++currentDepth;
        for (int i = 0; i < children.Count(); i++)
        {
            string parentalClass = string.Empty;
            if (currentDepth > Model.Depth)
            {
                parentalClass = $"parental parental-{Model.Depth}";
            }
            else if (currentDepth > 0)
            {
                parentalClass = $"parental parental-{currentDepth}";
            }

            <li data-comment-id="@children[i].Id.ToString()" data-parent-id="@(children[i].ParentId?.ToString() ?? "")" class="blog-comment @parentalClass">
                <article class="uk-visible-toggle uk-comment" tabindex="-1">
                    <header class="uk-comment-header uk-position-relative">
                        <div class="uk-grid-medium uk-flex-middle" uk-grid>
                            <div class="user-info-container uk-width-auto">
                                <avatar user="@children[i].Author" px="80" classes="uk-comment-avatar" />
                            </div>
                            <div class="uk-width-expand">
                                <h4 class="comment-username uk-comment-title uk-margin-remove">
                                    @if (children[i].Author is not null)
                                    {
                                        <a class="uk-link-reset" href="@Url.Action("account", "users", new { username = children[i].Author.Username })">@children[i].Author.Username</a>
                                    }
                                    else
                                    {
                                        <a class="uk-link-reset" href="#"><i>deleted</i></a>
                                    }
                                </h4>
                                <div class="comment-time-info time-info uk-comment-meta uk-margin-remove-top">
                                    <time class="time-info-created" datetime="@children[i].DateTime.UtcDateTime.ToString("o")">@children[i].DateTime.ToString("g")</time>
                                    @if (children[i].UpdatedDateTime is not null)
                                    {
                                        <span class="datetime-updated-text">(updated at <time class="time-info-updated" datetime="@children[i].UpdatedDateTime?.UtcDateTime.ToString("o")">@children[i].UpdatedDateTime?.ToString("g")</time>)</span>
                                    }
                                </div>

                                @if (User.Identity.IsAuthenticated && !children[i].IsDeleted)
                                {
                                    bool allowEditing = false;
                                    if (Model.User.Id.Equals(children[i].AuthorId) && (Model.User.Role?.WriteComments ?? default))
                                    {
                                        allowEditing = true;
                                    }

                                    <div>
                                        <div class="comment-change uk-button-group uk-position-top-right">
                                            @if (allowEditing)
                                            {
                                                <button class="reply-button blog-btn" onclick="getUpdateCommentForm(this)" type="button">
                                                    <span uk-icon="icon: pencil"></span>
                                                </button>
                                            }
                                            @if (allowEditing || ((Model.User.Role as ExtendedRole)?.ModerateComments ?? default))
                                            {
                                                <button class="comment-change-delete reply-button blog-btn" onclick="deleteActions(this)" type="button">
                                                    <span uk-icon="icon: close"></span>
                                                </button>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </header>

                    <div class="uk-comment-body comment-container">
                        @{
                            if (children[i].IsDeleted)
                            {
                                <p><i>[deleted]</i></p>
                            }
                            else
                            {
                                string[] commentText = children[i].Text.Split(new string[] { "\n", "\r\n" }, StringSplitOptions.RemoveEmptyEntries);
                                foreach (string txt in commentText)
                                {
                                    <p>@txt</p>
                                }
                            }
                        }
                    </div>

                    @{
                        CommentLikes commentLike = children[i].Likes
                            .Where(cl => cl.UserId == Model.User?.Id)
                            .FirstOrDefault();
                    }

                    <div class="comment-actions-container uk-comment-footer blog-comment-footer">
                        <div class="uk-button-group">
                            <button class="blog-btn heart-button" onclick="likeComment(this)" type="button">
                                @if (commentLike is not null)
                                {
                                    <img src="img/buttons/heart red.png" alt="liked" class="blog-btn-img">
                                }
                                else
                                {
                                    <img src="img/buttons/heart.png" alt="like" class="blog-btn-img">
                                }
                                <span name="commentLikesNumber">@children[i].Likes.Count</span>
                            </button>
                            @if (Model.WriteComments)
                            {
                                <button class="blog-btn" onclick="getReplyCommentForm(this)" type="button">
                                    <span uk-icon="icon: reply"></span>
                                </button>
                            }
                        </div>
                    </div>
                </article>
            </li>

            @if (children[i].Children.Any())
            {
                await GetCommentAsync(children[i].Children, currentDepth);
            }
        }
        --currentDepth;
    }
}

<div class="uk-container uk-margin">
    <div class="uk-card uk-card-default uk-card-hover">
        <div class="uk-card-header">
            @if (!Model.CommentsVisibility)
            {
                <h3 class="uk-text-bottom uk-text-center"><span class="uk-text-middle" uk-icon="lock"></span> Comments are hidden</h3>
            }
            else if (!User.Identity.IsAuthenticated)
            {
                <h3><a href="#">Sign in </a> to leave a comment</h3>
            }
            else
            {
                <form class="root-comment-answer root-answer-form">
                    <fieldset class="uk-fieldset">
                        <legend class="uk-legend uk-text-secondary uk-margin-bottom">Leave a comment</legend>
                        <a href="#" class="uk-link-reset">
                            <div class="uk-grid-small uk-flex-middle" uk-grid>
                                <div class="uk-width-auto">
                                    <avatar user="Model.User" px="40" classes="uk-border-circle" />
                                </div>
                                <div class="uk-width-expand">
                                    <h3 class="uk-card-title uk-text-secondary uk-margin-remove-bottom">@Model.User.Username</h3>
                                </div>
                            </div>
                        </a>

                        <div class="uk-margin">
                            <textarea class="uk-textarea" rows="5" placeholder="Add comment"></textarea>
                            <span class="blog-field-validation" asp-validation-for="@commentViewModel.Text"></span>
                        </div>
                    </fieldset>

                    <button onclick="sendComment(this)" class="uk-button uk-button-secondary" type="button">Add</button>
                </form>
            }
        </div>
        @if (Model.CommentsVisibility)
        {
            <div class="uk-card-body">
                @if (!Model.Comments.Any())
                {
                    <h3 id="noCommentsMessage" class="uk-margin-remove">There is no comments yet</h3>
                }
                else
                {
                    <h3 id="commentsAreExistMessage" class="uk-text-secondary">Comments</h3>
                }
                <ul data-comments-depth="@Model.Depth" id="comments-container" class="uk-comment-list article-comments-collection">

                    @if (Model.Comments.Any())
                    {
                        List<Comment> root = Model.Comments
                            .Where(c => c.ParentId is null)
                            .OrderBy(c => c.DateTime.Ticks)
                            .ToList();
                        await GetCommentAsync(root, -1);
                    }

                </ul>
            </div>
        }
    </div>
</div>