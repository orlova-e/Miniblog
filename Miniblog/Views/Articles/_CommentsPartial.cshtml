@model CommentsViewModel

@{

    //#nullable disable
    async Task GetComment(List<Comment> children, int currentDepth)
    {
        ++currentDepth;
        for (int i = 0; i < children.Count(); i++)
        {
            string commentParentId = string.Empty;
            if (children[i].ParentId is object)
                commentParentId = children[i].ParentId.ToString();

            string parentalClass = string.Empty;

            if(currentDepth > Model.Depth)
            {
                parentalClass = $"parental parental-{Model.Depth}";
            }
            else if(currentDepth > 0)
            {
                parentalClass = $"parental parental-{currentDepth}";
            }

            <div data-comment-id="@children[i].Id.ToString()" data-parent-id="@commentParentId" class="blog-comment @parentalClass">

                <div class="user-info-container">
                    @if (children[i].Author.Avatar != null)
                    {
                        <img name="avatar" src="data:image/jpeg;base64,@(Convert.ToBase64String(children[i].Author.Avatar))" alt="@children[i].Author.Username">
                    }
                    else
                    {
                        <img name="avatar" src="@Url.Content("~/img/social_line/anonymous_user.png")" alt="user">
                    }
                </div>

                <div class="text-comment-container clearfix">

                    <div class="blog-comment-meta">
                        <a class="comment-username" href="@Url.Action("account", "users", new { username = children[i].Author.Username })">
                            @children[i].Author.Username
                        </a>

                        @if (User.Identity.IsAuthenticated && !children[i].IsDeleted)
                        {
                            bool allowEditing = false;
                            if (children[i].AuthorId.Equals(Model.CurrentUser.Id) && (Model.CurrentUser.Role?.WriteComments ?? default))
                            {
                                allowEditing = true;
                            }

                            <div class="comment-change">
                                @if (allowEditing)
                                {
                                    <button type="button" onclick="getUpdateCommentForm(this)" class="reply-button">
                                        <img src="/img/ico/rewrite.png" alt="reply">
                                    </button>
                                }

                                @if (allowEditing || ((Model.CurrentUser.Role as ExtendedRole)?.ModerateComments ?? default))
                                {
                                    <button class="comment-change-delete reply-button" type="button" onclick="deleteActions(this)">
                                        <img src="/img/ico/delete7.png" alt="reply">
                                    </button>
                                }
                            </div>
                        }
                        else
                        {
                            <div></div>
                        }

                        <span class="comment-time-info time-info">

                        </span>
                        <span class="time-info-utc time-info-created">@children[i].DateTime.ToString("O")</span>
                        <span class="time-info-utc time-info-updated">@children[i].UpdatedDateTime?.ToString("O")</span>
                    </div>

                    <div class="comment-container">
                        @{
                            if (children[i].IsDeleted)
                            {
                                <p><i>Deleted</i></p>
                            }
                            else
                            {
                                string[] commentText = children[i].Text.Split(new string[] { "\n", "\r\n" }, StringSplitOptions.RemoveEmptyEntries);
                                foreach (string txt in commentText)
                                {
                                    <p>@txt</p>
                                }
                            }
                        }
                    </div>

                    <div class="comment-actions-container">

                        <div class="hearts">
                            @*@{
                                string userLikeClick = string.Empty;
                                if (User.Identity.IsAuthenticated)
                                {
                                    userLikeClick = "onclick=\"heartClick(this)\"";
                                }
                            }*@

                            @{ 

                                CommentLikes commentLike = children[i].Likes
                                    .Where(cl => cl.UserId == Model.CurrentUser?.Id && Model.CurrentUser.Id != null)
                                    .FirstOrDefault();

                                //var commentLike = from l in children[i].Likes
                                //                  where l.UserId.Equals(Model.CurrentUser?.Id)
                                //                  select l;

                                //class="heart-clicked"
                                <button type="button" class="heart-button" onclick="likeComment(this)">
                                    @if (commentLike != null)
                                    {
                                        <img src="~/img/buttons/heart red.png" class="comment-action-checked" alt="like">
                                        <img src="~/img/buttons/heart.png" class="comment-action-inactive comment-action-unchecked" alt="like">
                                    }
                                    else
                                    {
                                        <img src="~/img/buttons/heart red.png" class="comment-action-inactive comment-action-checked" alt="like">
                                        <img src="~/img/buttons/heart.png" class="comment-action-unchecked" alt="like">
                                    }
                                </button>
                            }
                            
                            <span name="commentLikesNumber" class="hearts-counter text-sans-style comment-hearts-count">@children[i].Likes.Count</span>
                        </div>

                        @if (Model.WriteComments)
                        {
                            <div class="comment-reply">
                                <button type="button" onclick="getReplyCommentForm(this)" class="reply-button">
                                    <img src="/img/buttons/next.png" alt="reply">
                                </button>
                            </div>
                        }
                    </div>

                    @{
                        @*if (currentDepth < Model.Depth)
                        {
                            <div class="users-comment-answer-collection">
                                @if (children[i].Children.Any())
                                {
                                    GetComment(children[i].Children, currentDepth);
                                }
                            </div>
                        }*@
                    }
                </div>

            </div>

            @if (children[i].Children.Any())
            {
                await GetComment(children[i].Children, currentDepth);
            }

            @*if (currentDepth >= Model.Depth)
            {
                // TODO: include collection class to addComment method
                <div data-collection-of-parent="@children[i].Id.ToString()" class="users-comment-answer-collection">
                    @if (children[i].Children.Any())
                    {
                        GetComment(children[i].Children, currentDepth);
                    }
                </div>
            }*@
                            }
                            --currentDepth;
                        }
                        //#nullable restore
}

<div class="blog-comments text-alegreya-style">

    <a name="commentsAnch"></a>

    @{
        if (!Model.Comments.Any())
        {
            <h4>Leave a comment first!</h4>
        }
        else
        {
            <h3>Comments</h3>

            <div data-comments-depth="@Model.Depth" class="article-comments-collection">
                @{
                    List<Comment> rootComments = (from comment in Model.Comments
                                                  where comment.ParentId == null
                                                  orderby comment.DateTime.Ticks
                                                  select comment).ToList();
                    await GetComment(rootComments, -1);
                }
            </div>
        }
    }
</div>